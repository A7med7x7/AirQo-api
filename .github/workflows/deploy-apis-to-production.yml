name: deploy-apis-to-production

on:
  pull_request:
    branches:
      - master
    types:
      - closed

jobs:
  image-tag:
    if: github.event.pull_request.merged == true
    name: create image tag
    runs-on: ubuntu-latest
    outputs:
      build_id: ${{ steps.prep.outputs.build_id }} # build id
      datetime: ${{ steps.prep.outputs.datetime }} # build date
    steps:
      - name: generate build ID
        id: prep
        run: |
          sha=${GITHUB_SHA::8}
          timestamp=$(date +%s)
          datetime=$(date)
          echo "::set-output name=build_id::prod-${sha}-${timestamp}"
          echo "::set-output name=datetime::${datetime}"

  check:
    if: github.event.pull_request.merged == true
    name: check changed microservice(s)
    outputs:
      run_auth_service: ${{ steps.check_files.outputs.run_auth_service }} # auth service
      run_device_registry: ${{ steps.check_files.outputs.run_device_registry }} # device registry
      run_device_monitoring: ${{ steps.check_files.outputs.run_device_monitoring }} # device monitoring
      run_data_mgt: ${{ steps.check_files.outputs.run_data_mgt }} # data mgt
      run_analytics: ${{ steps.check_files.outputs.run_analytics }} # analytics
      run_device_uptime: ${{ steps.check_files.outputs.run_device_uptime }} # device uptime
      run_device_status: ${{ steps.check_files.outputs.run_device_status }} # device status
      run_locate: ${{ steps.check_files.outputs.run_locate }} # locate
      run_predict: ${{ steps.check_files.outputs.run_predict }} # predict
      run_gp_model: ${{ steps.check_files.outputs.run_gp_model }} # gp_model
      run_exceedances: ${{ steps.check_files.outputs.run_exceedances }} # exceedances
      run_meta_data: ${{ steps.check_files.outputs.run_meta_data }} # meta data
      run_view: ${{ steps.check_files.outputs.run_view }} # view
      run_calibrate: ${{ steps.check_files.outputs.run_calibrate }} # calibrate
      run_average_jobs: ${{ steps.check_files.outputs.run_average_jobs }} # average and calibration jobs
      run_events_check: ${{ steps.check_files.outputs.run_events_check }} # event checks
      run_notifications: ${{ steps.check_files.outputs.run_notifications }} # notification
      run_kafka_cluster_operator: ${{ steps.check_files.outputs.run_kafka_cluster_operator }} # kafka cluster operator
      run_kafka_cluster: ${{ steps.check_files.outputs.run_kafka_cluster }} # kafka cluster
      run_kafka_topics: ${{ steps.check_files.outputs.run_kafka_topics }} # kafka topics
      run_airflow: ${{ steps.check_files.outputs.run_airflow }} # airflow
      run_network_uptime: ${{ steps.check_files.outputs.run_network_uptime }} # network_uptime
      run_channel_data: ${{ steps.check_files.outputs.run_channel_data }} # channel data job
      run_kafka_connectors: ${{ steps.check_files.outputs.run_kafka_connectors }} # kafka connectors
      run_fault_detection: ${{ steps.check_files.outputs.run_fault_detection }} # fault detection
      run_nginx: ${{ steps.check_files.outputs.run_nginx }} # nginx ingress

    runs-on: ubuntu-latest
    steps:
      - name: checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 2

        #### all microservices ######
      - name: check modified microserivce
        id: check_files
        run: |
          echo "=============== list modified files ==============="
          git diff --name-only HEAD^ HEAD

          echo "========== check paths of modified files =========="
          git diff --name-only HEAD^ HEAD > files.txt

          echo "::set-output name=run_auth_service::false"
          echo "::set-output name=run_device_registry::false"  
          echo "::set-output name=run_device_monitoring::false" 
          echo "::set-output name=run_data_mgt::false"
          echo "::set-output name=run_analytics::false"
          echo "::set-output name=run_device_uptime::false"  
          echo "::set-output name=run_device_status::false" 
          echo "::set-output name=run_locate::false"
          echo "::set-output name=run_predict::false"
          echo "::set-output name=run_gp_model::false"
          echo "::set-output name=run_exceedances::false"
          echo "::set-output name=run_meta_data::false"
          echo "::set-output name=run_view::false"
          echo "::set-output name=run_calibrate::false" 
          echo "::set-output name=run_average_jobs::false"
          echo "::set-output name=run_events_check::false"
          echo "::set-output name=run_notifications::false"
          echo "::set-output name=run_kafka_cluster_operator::false"
          echo "::set-output name=run_kafka_cluster::false"
          echo "::set-output name=run_kafka_topics::false"
          echo "::set-output name=run_airflow::false"
          echo "::set-output name=run_network_uptime::false"
          echo "::set-output name=run_channel_data::false"
          echo "::set-output name=run_kafka_connectors::false"
          echo "::set-output name=run_fault_detection::false"
          echo "::set-output name=run_nginx::false"

          while IFS= read -r file
          do
            echo $file
            
            if [[ $file == src/auth-service/* ]]; then
              echo "::set-output name=run_auth_service::true"
            fi
            
            if [[ $file == k8s/auth-service/* ]]; then
              echo "::set-output name=run_auth_service::true"
            fi

            if [[ $file == src/device-registry/* ]]; then
              echo "::set-output name=run_device_registry::true"
            fi

            if [[ $file == k8s/device-registry/* ]]; then
              echo "::set-output name=run_device_registry::true"
            fi

            if [[ $file == src/device-monitoring/* ]]; then
              echo "::set-output name=run_device_monitoring::true"
            fi

            if [[ $file == k8s/device-monitor/* ]]; then
              echo "::set-output name=run_device_monitoring::true"
            fi

            if [[ $file == src/data-mgt/node/* ]]; then
              echo "::set-output name=run_data_mgt::true"
            fi

            if [[ $file == k8s/data-mgt/* ]]; then
              echo "::set-output name=run_data_mgt::true"
            fi

            if [[ $file == src/analytics/* ]]; then
              echo "::set-output name=run_analytics::true"
            fi

            if [[ $file == k8s/analytics/* ]]; then
              echo "::set-output name=run_analytics::true"
            fi

            if [[ $file == src/device-uptime/* ]]; then
              echo "::set-output name=run_device_uptime::true"
            fi

            if [[ $file == k8s/device-uptime/* ]]; then
              echo "::set-output name=run_device_uptime::true"
            fi

            if [[ $file == src/device-status/* ]]; then
              echo "::set-output name=run_device_status::true"
            fi

            if [[ $file == k8s/device-status/* ]]; then
              echo "::set-output name=run_device_status::true"
            fi

            if [[ $file == src/locate/* ]]; then
              echo "::set-output name=run_locate::true"
            fi

            if [[ $file == k8s/locate/* ]]; then
              echo "::set-output name=run_locate::true"
            fi

            if [[ $file == src/predict/* ]]; then
              echo "::set-output name=run_predict::true"
            fi

            if [[ $file == k8s/predict/* ]]; then
              echo "::set-output name=run_predict::true"
            fi

            if [[ $file == src/gp-model/* ]]; then
              echo "::set-output name=run_gp_model::true"
            fi

            if [[ $file == k8s/gp-model/* ]]; then
              echo "::set-output name=run_gp_model::true"
            fi

            if [[ $file == src/exceedances/* ]]; then
              echo "::set-output name=run_exceedances::true"
            fi

            if [[ $file == k8s/exceedance/* ]]; then
              echo "::set-output name=run_exceedances::true"
            fi

            if [[ $file == src/meta-data/* ]]; then
              echo "::set-output name=run_meta_data::true"
            fi

            if [[ $file == k8s/meta-data/* ]]; then
              echo "::set-output name=run_meta_data::true"
            fi

            if [[ $file == src/view/* ]]; then
              echo "::set-output name=run_view::true"
            fi

            if [[ $file == k8s/view-api/* ]]; then
              echo "::set-output name=run_view::true"
            fi
            
            if [[ $file == src/calibrate/* ]]; then
              echo "::set-output name=run_calibrate::true"
            fi
            
            if [[ $file == k8s/calibrate/* ]]; then
              echo "::set-output name=run_calibrate::true"
            fi
            
            if [[ $file == src/data-mgt/python/cron-jobs/* ]]; then
              echo "::set-output name=run_average_jobs::true"
            fi

            if [[ $file == src/data-mgt/python/events-monitor/* ]]; then
              echo "::set-output name=run_events_check::true"
            fi

            if [[ $file == src/notifications/* ]]; then
              echo "::set-output name=run_notifications::true"
            fi

            if [[ $file == k8s/notification-service/* ]]; then
              echo "::set-output name=run_notifications::true"
            fi

            if [[ $file == k8s/kafka/clusters/* ]]; then
              echo "::set-output name=run_kafka_cluster::true"
            fi

            if [[ $file == k8s/kafka/operator/* ]]; then
              echo "::set-output name=run_kafka_cluster_operator::true"
            fi

            if [[ $file == k8s/kafka/topics/* ]]; then
              echo "::set-output name=run_kafka_topics::true"
            fi

            if [[ $file == src/kafka/connectors/* ]]; then
              echo "::set-output name=run_kafka_connectors::true"
            fi

            if [[ $file == src/airflow/* ]]; then
              echo "::set-output name=run_airflow::true"
            fi

            if [[ $file == k8s/airflow/* ]]; then
              echo "::set-output name=run_airflow::true"
            fi

            if [[ $file == src/network-uptime/* ]]; then
              echo "::set-output name=run_network_uptime::true"
            fi

            if [[ $file == k8s/network-uptime/* ]]; then
              echo "::set-output name=run_network_uptime::true"
            fi
            
            if [[ $file == src/channel-data/* ]]; then
              echo "::set-output name=run_channel_data::true"
            fi
            
            if [[ $file == k8s/channel-data/* ]]; then
              echo "::set-output name=run_channel_data::true"
            fi

            if [[ $file == src/fault-detection/* ]]; then
              echo "::set-output name=run_fault_detection::true"
            fi

            if [[ $file == k8s/fault-detection/* ]]; then
              echo "::set-output name=run_fault_detection::true"
            fi

            if [[ $file == k8s/nginx/production/* ]]; then
              echo "::set-output name=run_nginx::true"
            fi

            if [[ $file == workflow-trigger ]]; then
              echo "::set-output name=run_notifications::true"
              echo "::set-output name=run_events_check::true"
              echo "::set-output name=run_calibrate::true"
              echo "::set-output name=run_average_jobs::true"
              echo "::set-output name=run_meta_data::true"
              echo "::set-output name=run_exceedances::true"
              echo "::set-output name=run_gp_model::true"
              echo "::set-output name=run_predict::true"
              echo "::set-output name=run_locate::true"
              echo "::set-output name=run_device_status::true"
              echo "::set-output name=run_device_uptime::true"
              echo "::set-output name=run_analytics::true"
              echo "::set-output name=run_data_mgt::true"
              echo "::set-output name=run_device_monitoring::true"
              echo "::set-output name=run_device_registry::true"
              echo "::set-output name=run_auth_service::true"
              echo "::set-output name=run_airflow::true"
              echo "::set-output name=run_network_uptime::true"
              echo "::set-output name=run_channel_data::true"
              echo "::set-output name=run_fault_detection::true"
              echo "::set-output name=run_view::true"
              echo "::set-output name=run_kafka_connectors::true"
              echo "::set-output name=run_nginx::true"
            fi

          done < files.txt

  #### Kafka Connectors ######
  kafka-connectors:
    name: build-push-deploy-kafka-connectors
    needs: [check, image-tag]
    if: needs.check.outputs.run_kafka_connectors == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to GCR
        uses: docker/login-action@v1
        with:
          registry: ${{ secrets.REGISTRY_URL }}
          username: _json_key
          password: ${{ secrets.GCR_CONFIG }}

      - name: Build and push measurements source connectors
        uses: docker/build-push-action@v2
        with:
          push: true
          context: src/kafka/connectors/measurements-source-connector
          tags: ${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/measurements-connect:${{ needs.image-tag.outputs.build_id }},${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/measurements-connect:latest

      - name: Login to k8s cluster
        uses: azure/k8s-set-context@v1
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.K8S_CONFIG_PROD }}

      - name: Deploy to k8s cluster
        run: |
          export MEASUREMENTS_CONNECT_IMAGE=${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/measurements-connect:${{ needs.image-tag.outputs.build_id }}
          export STAGE_KAFKA_CLUSTER=${{ secrets.STAGE_KAFKA_CLUSTER }}
          cat k8s/kafka/connectors/measurements-connect.yaml | sed "s/{{MEASUREMENTS_CONNECT_IMAGE}}/$MEASUREMENTS_CONNECT_IMAGE/g" | sed "s/{{KAFKA_CLUSTER}}/$STAGE_KAFKA_CLUSTER/g" | kubectl apply -n message-broker -f-
          kubectl apply -f k8s/kafka/connectors/purple-air-connector.yaml -n message-broker

  ### auth service ###
  auth-service:
    name: build-push-deploy-auth
    needs: [check, image-tag]
    if: needs.check.outputs.run_auth_service == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Login to GCR
        uses: docker/login-action@v1
        with:
          registry: ${{ secrets.REGISTRY_URL }}
          username: _json_key
          password: ${{ secrets.GCR_CONFIG }}

      - name: Login to K8S
        uses: azure/k8s-set-context@v1
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.K8S_CONFIG_PROD }}

      - name: Build and Push Docker Image
        run: |
          cd src/auth-service/
          docker build --target=production --tag ${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-auth-api:${{ needs.image-tag.outputs.build_id }} .
          docker tag ${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-auth-api:${{ needs.image-tag.outputs.build_id }} ${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-auth-api:latest
          docker push ${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-auth-api:${{ needs.image-tag.outputs.build_id }}
          docker push ${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-auth-api:latest

      - name: Login to GCP
        uses: google-github-actions/auth@v0
        with:
          credentials_json: ${{ secrets.GCP_SA_CREDENTIALS }}

      - name: Setup Cloud SDK
        uses: google-github-actions/setup-gcloud@v0

      - name: Update the corresponding k8s configmap(s)
        run: |
          cd src/auth-service/
          gcloud secrets versions access latest --secret="prod-env-auth-service" > .env
          kubectl create configmap --dry-run=client -o yaml --from-env-file=.env prod-auth-api-config | kubectl replace -f - -n production
          gcloud secrets versions access latest --secret="prod-key-auth-service-firebase-admin-sdk" > firebase_admin_sdk.json
          kubectl create configmap --dry-run=client -o yaml --from-file=firebase_admin_sdk.json prod-auth-api-config-files | kubectl replace -f - -n production

      - name: Deploy to K8S
        run: |
          kubectl apply -f k8s/auth-service/prod-auth-api.yaml
          kubectl set image deployment/airqo-auth-api auth-api=${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-auth-api:${{ needs.image-tag.outputs.build_id }} -n production
          kubectl annotate deployment/airqo-auth-api kubernetes.io/change-cause="Image updated to ${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-auth-api:${{ needs.image-tag.outputs.build_id }} on ${{ needs.image-tag.outputs.datetime }}" -n production

  #### Fault Detection ######
  fault-detection:
    name: build-push-deploy-fault-detection
    needs: [check, image-tag]
    if: needs.check.outputs.run_fault_detection == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to GCR
        uses: docker/login-action@v1
        with:
          registry: ${{ secrets.REGISTRY_URL }}
          username: _json_key
          password: ${{ secrets.GCR_CONFIG }}

      - name: Build and push train catboost model
        uses: docker/build-push-action@v2
        with:
          push: true
          context: src/fault-detection
          target: train-catboost-model
          tags: ${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/prod-train-catboost-model:${{ needs.image-tag.outputs.build_id }},${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/prod-train-catboost-model:latest

      - name: Build and push train lstm model
        uses: docker/build-push-action@v2
        with:
          push: true
          context: src/fault-detection
          target: train-lstm-model
          tags: ${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/prod-train-lstm-model:${{ needs.image-tag.outputs.build_id }},${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/prod-train-lstm-model:latest

      - name: Build and push fault detection API
        uses: docker/build-push-action@v2
        with:
          push: true
          context: src/fault-detection
          target: production
          tags: ${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/prod-fault-detection-api:${{ needs.image-tag.outputs.build_id }},${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/prod-fault-detection-api:latest

      - name: Login to k8s cluster
        uses: azure/k8s-set-context@v1
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.K8S_CONFIG_PROD }}

      - name: Login to GCP
        uses: google-github-actions/auth@v0
        with:
          credentials_json: ${{ secrets.GCP_SA_CREDENTIALS }}

      - name: Setup Cloud SDK
        uses: google-github-actions/setup-gcloud@v0

      - name: Update the corresponding k8s configmap(s)
        run: |
          cd src/fault-detection/
          gcloud secrets versions access latest --secret="prod-env-fault-detection" > .env
          kubectl create configmap --dry-run=client -o yaml --from-env-file=.env prod-fault-detection-api-config | kubectl replace -f - -n production

      - name: Deploy to k8s cluster
        run: |
          kubectl apply -f k8s/fault-detection/prod-fault-detection-api.yaml -n production
          kubectl rollout restart deployment prod-fault-detection-api  -n production

  ### airflow ###
  airflow:
    name: build-push-deploy-airflow
    needs: [check, image-tag]
    if: needs.check.outputs.run_airflow == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to GCR
        uses: docker/login-action@v1
        with:
          registry: ${{ secrets.REGISTRY_URL }}
          username: _json_key
          password: ${{ secrets.GCR_CONFIG }}

      - name: Login to K8S
        uses: azure/k8s-set-context@v1
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.K8S_CONFIG_PROD }}

      - name: Build and push app
        uses: docker/build-push-action@v2
        with:
          push: true
          context: src/airflow
          target: deployment
          tags: ${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-apache-airflow:${{ needs.image-tag.outputs.build_id }},${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-apache-airflow:latest

      - name: Build and push XCom
        uses: docker/build-push-action@v2
        with:
          push: true
          context: src/airflow
          target: xcom-setup
          tags: ${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-apache-airflow-xcom:${{ needs.image-tag.outputs.build_id }},${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-apache-airflow-xcom:latest

      - name: Login to GCP
        uses: google-github-actions/auth@v0
        with:
          credentials_json: ${{ secrets.GCP_SA_CREDENTIALS }}

      - name: Setup Cloud SDK
        uses: google-github-actions/setup-gcloud@v0

      - name: Update the corresponding k8s configmap(s)
        run: |
          cd src/airflow/
          gcloud secrets versions access latest --secret="prod-env-airflow" > .env
          kubectl create configmap --dry-run=client -o yaml --from-env-file=.env airflow-config | kubectl replace -f - -n pipeline

      - name: Deploy to K8S
        run: |
          kubectl apply -f k8s/airflow/airflow-app.yaml
          kubectl rollout restart deployment airflow  -n pipeline

  #### Device Registry ######
  device-registry:
    name: build-push-deploy-device-registry
    needs: [check, image-tag]
    if: needs.check.outputs.run_device_registry == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Login to GCR
        uses: docker/login-action@v1
        with:
          registry: ${{ secrets.REGISTRY_URL }}
          username: _json_key
          password: ${{ secrets.GCR_CONFIG }}

      - name: Login to K8S
        uses: azure/k8s-set-context@v1
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.K8S_CONFIG_PROD }}

      - name: Build and Push Docker Image
        run: |
          cd src/device-registry/
          docker build --target=production --tag ${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-device-registry-api:${{ needs.image-tag.outputs.build_id }} .
          docker tag ${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-device-registry-api:${{ needs.image-tag.outputs.build_id }} ${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-device-registry-api:latest
          docker push ${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-device-registry-api:${{ needs.image-tag.outputs.build_id }}
          docker push ${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-device-registry-api:latest

      - name: Login to GCP
        uses: google-github-actions/auth@v0
        with:
          credentials_json: ${{ secrets.GCP_SA_CREDENTIALS }}

      - name: Setup Cloud SDK
        uses: google-github-actions/setup-gcloud@v0

      - name: Update the corresponding k8s configmap(s)
        run: |
          cd src/device-registry/
          gcloud secrets versions access latest --secret="prod-env-device-registry" > .env
          kubectl create configmap --dry-run=client -o yaml --from-env-file=.env env-device-registry-production | kubectl replace -f - -n production
          gcloud secrets versions access latest --secret="prod-key-device-registry-service-account" > google_application_credentials.json
          kubectl create configmap --dry-run=client -o yaml --from-file=google_application_credentials.json device-registry-config-files | kubectl replace -f - -n production

      - name: Deploy to K8S
        run: |
          kubectl apply -f k8s/device-registry/prod-device-registry-api.yaml -n production
          kubectl set image deployment/airqo-device-registry-api device-reg-api=${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-device-registry-api:${{ needs.image-tag.outputs.build_id }} -n production
          kubectl annotate deployment/airqo-device-registry-api kubernetes.io/change-cause="Image updated to ${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-device-registry-api:${{ needs.image-tag.outputs.build_id }} on ${{ needs.image-tag.outputs.datetime }}" -n production

  ### device monitoring ###
  device-monitoring:
    name: build-push-deploy-device-monitoring
    needs: [check, image-tag]
    if: needs.check.outputs.run_device_monitoring == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Login to GCR
        uses: docker/login-action@v1
        with:
          registry: ${{ secrets.REGISTRY_URL }}
          username: _json_key
          password: ${{ secrets.GCR_CONFIG }}

      - name: Login to K8S
        uses: azure/k8s-set-context@v1
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.K8S_CONFIG_PROD }}

      - name: Build and Push Docker Image
        run: |
          cd src/device-monitoring/
          docker build --target=production --tag ${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-device-monitor-api:${{ needs.image-tag.outputs.build_id }} .
          docker tag ${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-device-monitor-api:${{ needs.image-tag.outputs.build_id }} ${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-device-monitor-api:latest
          docker push ${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-device-monitor-api:${{ needs.image-tag.outputs.build_id }}
          docker push ${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-device-monitor-api:latest

      - name: Login to GCP
        uses: google-github-actions/auth@v0
        with:
          credentials_json: ${{ secrets.GCP_SA_CREDENTIALS }}

      - name: Setup Cloud SDK
        uses: google-github-actions/setup-gcloud@v0

      - name: Update the corresponding k8s configmap(s)
        run: |
          cd src/device-monitoring/
          gcloud secrets versions access latest --secret="prod-env-device-monitoring" > .env
          kubectl create configmap --dry-run=client -o yaml --from-env-file=.env env-device-monitoring-production | kubectl replace -f - -n production

      - name: Deploy to K8S
        run: |
          kubectl apply -f k8s/device-monitor/prod-device-monitor-api.yaml -n production
          kubectl set image deployment/airqo-device-monitor-api dev-monitor-api=${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-device-monitor-api:${{ needs.image-tag.outputs.build_id }} -n production
          kubectl annotate deployment/airqo-device-monitor-api kubernetes.io/change-cause="Image updated to ${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-device-monitor-api:${{ needs.image-tag.outputs.build_id }} on ${{ needs.image-tag.outputs.datetime }}" -n production

  ### data-mgt ###
  data-mgt:
    name: build-push-deploy-data-mgt
    needs: check
    if: needs.check.outputs.run_data_mgt == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Login to GCR
        uses: docker/login-action@v1
        with:
          registry: ${{ secrets.REGISTRY_URL }}
          username: _json_key
          password: ${{ secrets.GCR_CONFIG }}

      - name: Login to K8S
        uses: azure/k8s-set-context@v1
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.K8S_CONFIG_PROD }}

      - name: Build and Push Docker Image
        run: |
          cd src/data-mgt/node/
          docker build --tag ${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-data-mgt-api:latest .
          docker push ${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-data-mgt-api:latest

      - name: Login to GCP
        uses: google-github-actions/auth@v0
        with:
          credentials_json: ${{ secrets.GCP_SA_CREDENTIALS }}

      - name: Setup Cloud SDK
        uses: google-github-actions/setup-gcloud@v0

      - name: Update the corresponding k8s configmap(s)
        run: |
          cd src/data-mgt/node/
          gcloud secrets versions access latest --secret="prod-env-data-mgt-nodejs" > .env
          kubectl create configmap --dry-run=client -o yaml --from-env-file=.env data-mgt-api-config | kubectl replace -f - -n production

      - name: Deploy to K8S
        run: |
          kubectl apply -f k8s/data-mgt/prod-data-mgt-api.yaml -n production
          kubectl rollout restart deployment/airqo-data-mgt-api -n production

  ### analytics ###
  analytics:
    name: build-push-deploy-analytics
    needs: [check, image-tag]
    if: needs.check.outputs.run_analytics == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      ### run unit tests ###

      - name: Login to GCR
        uses: docker/login-action@v1
        with:
          registry: ${{ secrets.REGISTRY_URL }}
          username: _json_key
          password: ${{ secrets.GCR_CONFIG }}

      - name: Login to K8S
        uses: azure/k8s-set-context@v1
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.K8S_CONFIG_PROD }}

      - name: Build and Push Docker Image
        run: |
          cd src/analytics/
          docker build --target=production --tag ${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-analytics-api:${{ needs.image-tag.outputs.build_id }} .
          docker tag ${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-analytics-api:${{ needs.image-tag.outputs.build_id }} ${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-analytics-api:latest
          docker push ${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-analytics-api:${{ needs.image-tag.outputs.build_id }}
          docker push ${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-analytics-api:latest

      - name: Login to GCP
        uses: google-github-actions/auth@v0
        with:
          credentials_json: ${{ secrets.GCP_SA_CREDENTIALS }}

      - name: Setup Cloud SDK
        uses: google-github-actions/setup-gcloud@v0

      - name: Update the corresponding k8s configmap(s)
        run: |
          cd src/analytics/
          gcloud secrets versions access latest --secret="prod-env-analytics" > .env
          kubectl create configmap --dry-run=client -o yaml --from-env-file=.env env-analytics-production | kubectl replace -f - -n production
          gcloud secrets versions access latest --secret="prod-key-analytics-service-account" > google_application_credentials.json
          kubectl create configmap --dry-run=client -o yaml --from-file=google_application_credentials.json prod-analytics-config-files | kubectl replace -f - -n production

      - name: Deploy to K8S
        run: |
          kubectl apply -f k8s/analytics/prod-analytics-api.yaml -n production
          kubectl set image deployment/airqo-analytics-api analytics-api=${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-analytics-api:${{ needs.image-tag.outputs.build_id }} -n production
          kubectl annotate deployment/airqo-analytics-api kubernetes.io/change-cause="Image updated to ${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-analytics-api:${{ needs.image-tag.outputs.build_id }} on ${{ needs.image-tag.outputs.datetime }}" -n production

  ### device uptime ###
  device-uptime:
    name: build-push-deploy-device-uptime
    needs: check
    if: needs.check.outputs.run_device_uptime == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      ### run unit tests ###

      - name: Login to GCR
        uses: docker/login-action@v1
        with:
          registry: ${{ secrets.REGISTRY_URL }}
          username: _json_key
          password: ${{ secrets.GCR_CONFIG }}

      - name: Login to K8S
        uses: azure/k8s-set-context@v1
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.K8S_CONFIG_PROD }}

      - name: Build and Push Docker Image
        run: |
          cd src/device-uptime/
          docker build --tag ${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-device-uptime-job:latest -f Dockerfile .
          docker push ${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-device-uptime-job:latest

      - name: Login to GCP
        uses: google-github-actions/auth@v0
        with:
          credentials_json: ${{ secrets.GCP_SA_CREDENTIALS }}

      - name: Setup Cloud SDK
        uses: google-github-actions/setup-gcloud@v0

      - name: Update the corresponding k8s configmap(s)
        run: |
          cd src/device-uptime/
          gcloud secrets versions access latest --secret="prod-env-device-uptime" > .env
          kubectl create configmap --dry-run=client -o yaml --from-env-file=.env env-device-uptime-production | kubectl replace -f - -n production

      - name: Deploy to K8S
        run: |
          kubectl apply -f k8s/device-uptime/prod-airqo-device-uptime-job.yaml

  ### device status ###
  device-status:
    name: build-push-deploy-device-status
    needs: check
    if: needs.check.outputs.run_device_status == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      ### run unit tests ###

      - name: Login to GCR
        uses: docker/login-action@v1
        with:
          registry: ${{ secrets.REGISTRY_URL }}
          username: _json_key
          password: ${{ secrets.GCR_CONFIG }}

      - name: Login to K8S
        uses: azure/k8s-set-context@v1
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.K8S_CONFIG_PROD }}

      - name: Build and Push Docker Image
        run: |
          cd src/device-status/
          docker build --tag ${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-device-status-job:latest -f Dockerfile .
          docker push ${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-device-status-job:latest

      - name: Login to GCP
        uses: google-github-actions/auth@v0
        with:
          credentials_json: ${{ secrets.GCP_SA_CREDENTIALS }}

      - name: Setup Cloud SDK
        uses: google-github-actions/setup-gcloud@v0

      - name: Update the corresponding k8s configmap(s)
        run: |
          cd src/device-status/
          gcloud secrets versions access latest --secret="prod-env-device-status" > .env
          kubectl create configmap --dry-run=client -o yaml --from-env-file=.env env-device-status-production | kubectl replace -f - -n production

      - name: Deploy to K8S
        run: |
          kubectl apply -f k8s/device-status/prod-airqo-device-status-job.yaml

  ### kafka cluster operator ###
  kafka-cluster-operator:
    name: build-push-deploy-kafka-cluster-operator
    needs: [check]
    if: needs.check.outputs.run_kafka_cluster_operator == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Login to K8S
        uses: azure/k8s-set-context@v1
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.K8S_CONFIG_PROD }}

      - name: Deploy to K8S
        run: |
          kubectl apply -f k8s/namespaces/message-broker.yaml
          bash k8s/kafka/operator/deployment-script.sh

  ### kafka cluster ###
  kafka-cluster:
    name: build-push-deploy-kafka-cluster
    needs: [check]
    if: ${{ (needs.check.outputs.run_kafka_cluster == 'true') || (needs.check.outputs.run_kafka_cluster_operator == 'true') }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Login to K8S
        uses: azure/k8s-set-context@v1
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.K8S_CONFIG_PROD }}

      - name: Deploy to K8S
        run: |
          export KAFKA_BROKER_0=${{ secrets.PROD_KAFKA_BROKER_0 }}
          export KAFKA_BROKER_1=${{ secrets.PROD_KAFKA_BROKER_1 }}
          export KAFKA_BROKER_2=${{ secrets.PROD_KAFKA_BROKER_2 }}

          sed -i 's/KAFKA_BROKER_0/'"$KAFKA_BROKER_0"'/g' k8s/kafka/clusters/kafka-cluster.yaml
          sed -i 's/KAFKA_BROKER_1/'"$KAFKA_BROKER_1"'/g' k8s/kafka/clusters/kafka-cluster.yaml
          sed -i 's/KAFKA_BROKER_2/'"$KAFKA_BROKER_2"'/g' k8s/kafka/clusters/kafka-cluster.yaml

          kubectl apply -n message-broker -f k8s/kafka/clusters/kafka-cluster.yaml
  ### kafka topics ###
  kafka-topics:
    name: build-push-deploy-kafka-topics
    needs: [check]
    if: ${{ (needs.check.outputs.run_kafka_cluster == 'true') || (needs.check.outputs.run_kafka_topics == 'true') }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Login to K8S
        uses: azure/k8s-set-context@v1
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.K8S_CONFIG_PROD }}

      - name: Deploy to K8S
        run: |
          kubectl apply -f k8s/kafka/topics/kafka-topics.yaml -n message-broker

  ### locate ###
  locate:
    name: build-push-deploy-locate
    needs: [check, image-tag]
    if: needs.check.outputs.run_locate == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      ### run unit tests ###

      - name: Login to GCR
        uses: docker/login-action@v1
        with:
          registry: ${{ secrets.REGISTRY_URL }}
          username: _json_key
          password: ${{ secrets.GCR_CONFIG }}

      - name: Login to K8S
        uses: azure/k8s-set-context@v1
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.K8S_CONFIG_PROD }}

      - name: Build and Push Docker Image
        run: |
          cd src/locate/
          docker build --target=production --tag ${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-locate-api:${{ needs.image-tag.outputs.build_id }} .
          docker tag ${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-locate-api:${{ needs.image-tag.outputs.build_id }} ${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-locate-api:latest
          docker push ${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-locate-api:${{ needs.image-tag.outputs.build_id }}
          docker push ${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-locate-api:latest

      - name: Login to GCP
        uses: google-github-actions/auth@v0
        with:
          credentials_json: ${{ secrets.GCP_SA_CREDENTIALS }}

      - name: Setup Cloud SDK
        uses: google-github-actions/setup-gcloud@v0

      - name: Update the corresponding k8s configmap(s)
        run: |
          cd src/locate/
          gcloud secrets versions access latest --secret="prod-env-locate-api" > .env
          kubectl create configmap --dry-run=client -o yaml --from-env-file=.env env-locate-production | kubectl replace -f - -n production

      - name: Deploy to K8S
        run: |
          kubectl apply -f k8s/locate/prod-locate-api.yaml -n production
          kubectl set image deployment/airqo-locate-api locate-api=${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-locate-api:${{ needs.image-tag.outputs.build_id }} -n production
          kubectl annotate deployment/airqo-locate-api kubernetes.io/change-cause="Image updated to ${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-locate-api:${{ needs.image-tag.outputs.build_id }} on ${{ needs.image-tag.outputs.datetime }}" -n production

  ### gp model ###
  gp-model:
    name: build-push-deploy-gp-model
    needs: check
    if: needs.check.outputs.run_gp_model == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      ### run unit tests ###

      - name: Login to GCR
        uses: docker/login-action@v1
        with:
          registry: ${{ secrets.REGISTRY_URL }}
          username: _json_key
          password: ${{ secrets.GCR_CONFIG }}

      - name: Login to K8S
        uses: azure/k8s-set-context@v1
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.K8S_CONFIG_PROD }}

      - name: Build and Push Docker Image
        run: |
          cd src/gp-model/
          docker build --target=production --tag ${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-gp-model-job:latest .
          docker push ${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-gp-model-job:latest

      - name: Login to GCP
        uses: google-github-actions/auth@v0
        with:
          credentials_json: ${{ secrets.GCP_SA_CREDENTIALS }}

      - name: Setup Cloud SDK
        uses: google-github-actions/setup-gcloud@v0

      - name: Update the corresponding k8s configmap(s)
        run: |
          cd src/gp-model/
          gcloud secrets versions access latest --secret="prod-env-gp-model" > .env
          kubectl create configmap --dry-run=client -o yaml --from-env-file=.env env-gp-model-production | kubectl replace -f - -n production

      - name: Deploy to K8S
        run: |
          kubectl apply -f k8s/gp-model/prod-airqo-gp-model-job.yaml

  ### exceddences ###
  exceedance:
    name: build-push-deploy-exceedances
    needs: [check, image-tag]
    if: needs.check.outputs.run_exceedances == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      ### run unit tests ###

      - name: Login to GCR
        uses: docker/login-action@v1
        with:
          registry: ${{ secrets.REGISTRY_URL }}
          username: _json_key
          password: ${{ secrets.GCR_CONFIG }}

      - name: Login to K8S
        uses: azure/k8s-set-context@v1
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.K8S_CONFIG_PROD }}

      - name: Build and push AirQo Docker image
        uses: docker/build-push-action@v2
        with:
          push: true
          context: src/exceedances
          target: airqo-production
          tags: ${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-exceedance-job:${{ needs.image-tag.outputs.build_id }},${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-exceedance-job:latest

      - name: Build and push KCCA Docker image
        uses: docker/build-push-action@v2
        with:
          push: true
          context: src/exceedances
          target: kcca-production
          tags: ${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/kcca-exceedance-job:${{ needs.image-tag.outputs.build_id }},${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/kcca-exceedance-job:latest

      - name: Deploy to K8S
        run: |
          kubectl apply -f k8s/exceedance/prod-airqo-exceedance-job.yaml
          kubectl apply -f k8s/exceedance/prod-kcca-exceedance-job.yaml

  ### meta-data ###
  meta-data:
    name: build-push-deploy-meta-data
    needs: [check, image-tag]
    if: needs.check.outputs.run_meta_data == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      ### run unit tests ###

      - name: Login to GCR
        uses: docker/login-action@v1
        with:
          registry: ${{ secrets.REGISTRY_URL }}
          username: _json_key
          password: ${{ secrets.GCR_CONFIG }}

      - name: Login to K8S
        uses: azure/k8s-set-context@v1
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.K8S_CONFIG_PROD }}

      - name: Build and Push Docker Image
        run: |
          cd src/meta-data/
          docker build --target=deployment --tag ${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-meta-data-api:${{ needs.image-tag.outputs.build_id }} .
          docker tag ${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-meta-data-api:${{ needs.image-tag.outputs.build_id }} ${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-meta-data-api:latest
          docker push ${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-meta-data-api:${{ needs.image-tag.outputs.build_id }}
          docker push ${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-meta-data-api:latest

      - name: Login to GCP
        uses: google-github-actions/auth@v0
        with:
          credentials_json: ${{ secrets.GCP_SA_CREDENTIALS }}

      - name: Setup Cloud SDK
        uses: google-github-actions/setup-gcloud@v0

      - name: Update the corresponding k8s configmap(s)
        run: |
          cd src/meta-data/
          gcloud secrets versions access latest --secret="prod-env-metadata" > .env
          kubectl create configmap --dry-run=client -o yaml --from-env-file=.env prod-meta-data-api-config | kubectl replace -f - -n production
          gcloud secrets versions access latest --secret="prod-key-metadata-service-account" > google_application_credentials.json
          kubectl create configmap --dry-run=client -o yaml --from-file=google_application_credentials.json prod-meta-data-api-config-files | kubectl replace -f - -n production

      - name: Login to GCP
        uses: google-github-actions/auth@v0
        with:
          credentials_json: ${{ secrets.GCP_SA_CREDENTIALS }}

      - name: Setup Cloud SDK
        uses: google-github-actions/setup-gcloud@v0

      - name: Update the corresponding k8s configmap(s)
        run: |
          cd src/exceedances/
          gcloud secrets versions access latest --secret="prod-env-exceedances" > .env
          kubectl create configmap --dry-run=client -o yaml --from-env-file=.env env-exceedance-production | kubectl replace -f - -n production

      - name: Deploy to K8S
        run: |
          kubectl apply -f k8s/meta-data/prod-meta-data-api.yaml
          kubectl rollout restart deployment airqo-meta-data-api -n production

  ### view ###
  view:
    name: build-push-deploy-view
    needs: [check, image-tag]
    if: needs.check.outputs.run_view == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to GCR
        uses: docker/login-action@v1
        with:
          registry: ${{ secrets.REGISTRY_URL }}
          username: _json_key
          password: ${{ secrets.GCR_CONFIG }}

      - name: Login to K8S
        uses: azure/k8s-set-context@v1
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.K8S_CONFIG_PROD }}

      - name: Build and push API
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: ${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-view-api:${{ needs.image-tag.outputs.build_id }},${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-view-api:latest
          target: api
          context: src/view

      - name: Build and push Message Broker
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: ${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-view-message-broker:${{ needs.image-tag.outputs.build_id }},${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-view-message-broker:latest
          target: message-broker
          context: src/view

      - name: Login to GCP
        uses: google-github-actions/auth@v0
        with:
          credentials_json: ${{ secrets.GCP_SA_CREDENTIALS }}

      - name: Setup Cloud SDK
        uses: google-github-actions/setup-gcloud@v0

      - name: Update the corresponding k8s configmap(s)
        run: |
          cd src/view/
          gcloud secrets versions access latest --secret="prod-env-view-api" > api.env
          kubectl create configmap --dry-run=client -o yaml --from-env-file=api.env prod-view-api-config | kubectl replace -f - -n production
          gcloud secrets versions access latest --secret="prod-env-view-message-broker" > message_broker.env
          kubectl create configmap --dry-run=client -o yaml --from-env-file=message_broker.env prod-view-message-broker-config | kubectl replace -f - -n production

      - name: Deploy API to K8S
        run: |
          kubectl apply -f k8s/view-api/prod-view-api.yaml -n production
          kubectl rollout restart deployment airqo-view-api  -n production

      - name: Deploy Message Broker to K8S
        run: |
          kubectl apply -f k8s/view-api/prod-view-message-broker.yaml -n production
          kubectl rollout restart deployment airqo-view-message-broker  -n production

  #### Calibrate ######
  calibrate:
    name: build-push-deploy-calibrate
    needs: [check, image-tag]
    if: needs.check.outputs.run_calibrate == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to GCR
        uses: docker/login-action@v1
        with:
          registry: ${{ secrets.REGISTRY_URL }}
          username: _json_key
          password: ${{ secrets.GCR_CONFIG }}

      - name: Build and push calibrate API
        uses: docker/build-push-action@v2
        with:
          push: true
          context: src/calibrate
          target: production
          tags: ${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-calibrate-api:${{ needs.image-tag.outputs.build_id }},${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-calibrate-api:latest

      - name: Build and push calibrate pickle file
        uses: docker/build-push-action@v2
        with:
          push: true
          context: src/calibrate
          target: pickle-file
          tags: ${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-calibrate-pickle-file:${{ needs.image-tag.outputs.build_id }},${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-calibrate-pickle-file:latest

      - name: Login to Main k8s cluster
        uses: azure/k8s-set-context@v1
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.K8S_CONFIG_PROD }}

      - name: Login to GCP
        uses: google-github-actions/auth@v0
        with:
          credentials_json: ${{ secrets.GCP_SA_CREDENTIALS }}

      - name: Setup Cloud SDK
        uses: google-github-actions/setup-gcloud@v0

      - name: Update the corresponding k8s configmap(s)
        run: |
          cd src/calibrate/
          gcloud secrets versions access latest --secret="prod-env-calibrate-api" > .env
          kubectl create configmap --dry-run=client -o yaml --from-env-file=.env prod-calibrate-api-config | kubectl replace -f - -n production
          gcloud secrets versions access latest --secret="prod-key-calibrate-service-account" > google_application_credentials.json
          kubectl create configmap --dry-run=client -o yaml --from-file=google_application_credentials.json prod-calibrate-api-config-files | kubectl replace -f - -n production

      - name: Deploy to Main k8s cluster
        run: |
          kubectl apply -f k8s/calibrate/prod-calibrate-api.yaml -n production
          kubectl set image deployment/airqo-calibrate-api calibrate-pickle=${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-calibrate-pickle-file:${{ needs.image-tag.outputs.build_id }} -n production
          kubectl set image deployment/airqo-calibrate-api calibrate=${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-calibrate-api:${{ needs.image-tag.outputs.build_id }} -n production
          kubectl annotate deployment/airqo-calibrate-api kubernetes.io/change-cause="Image updated to ${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-calibrate-api:${{ needs.image-tag.outputs.build_id }} on ${{ needs.image-tag.outputs.datetime }}" -n production

  ### events check ###
  events-check:
    name: build-push-events-check
    needs: [check, image-tag]
    if: needs.check.outputs.run_events_check == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      ### run unit tests ###

      - name: Login to GCR
        uses: docker/login-action@v1
        with:
          registry: ${{ secrets.REGISTRY_URL }}
          username: _json_key
          password: ${{ secrets.GCR_CONFIG }}

      - name: Login to K8S
        uses: azure/k8s-set-context@v1
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.K8S_CONFIG_PROD }}

      - name: Build and Push Docker Image
        run: |
          cd src/data-mgt/python/events-monitor/
          docker build --tag ${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-events-notifs-job:latest .
          docker push ${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-events-notifs-job:latest

      - name: Login to GCP
        uses: google-github-actions/auth@v0
        with:
          credentials_json: ${{ secrets.GCP_SA_CREDENTIALS }}

      - name: Setup Cloud SDK
        uses: google-github-actions/setup-gcloud@v0

      - name: Update the corresponding k8s configmap(s)
        run: |
          cd src/data-mgt/python/events-monitor/
          gcloud secrets versions access latest --secret="prod-env-device-registry-events-monitor" > .env
          kubectl create configmap --dry-run=client -o yaml --from-env-file=.env prod-events-notifs-cronjob-config | kubectl replace -f - -n production

      - name: Deploy to K8S
        run: |
          kubectl apply -f k8s/events-monitor/prod-events-notifs-cronjob.yaml -n production

  #### notification ######
  notification:
    name: build-push-deploy-notification
    needs: [check, image-tag]
    if: needs.check.outputs.run_notifications == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      ### run unit tests ###

      - name: Login to GCR
        uses: docker/login-action@v1
        with:
          registry: ${{ secrets.REGISTRY_URL }}
          username: _json_key
          password: ${{ secrets.GCR_CONFIG }}

      - name: Login to K8S
        uses: azure/k8s-set-context@v1
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.K8S_CONFIG_PROD }}

      - name: Build and Push Docker Image
        run: |
          cd src/notifications/
          docker build --target=production --tag ${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-notification-api:${{ needs.image-tag.outputs.build_id }} .
          docker tag ${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-notification-api:${{ needs.image-tag.outputs.build_id }} ${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-notification-api:latest
          docker push ${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-notification-api:${{ needs.image-tag.outputs.build_id }}
          docker push ${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-notification-api:latest

      - name: Login to GCP
        uses: google-github-actions/auth@v0
        with:
          credentials_json: ${{ secrets.GCP_SA_CREDENTIALS }}

      - name: Setup Cloud SDK
        uses: google-github-actions/setup-gcloud@v0

      - name: Update the corresponding k8s configmap(s)
        run: |
          cd src/notifications/
          gcloud secrets versions access latest --secret="prod-env-notifications" > .env
          kubectl create configmap --dry-run=client -o yaml --from-env-file=.env prod-notification-api-config | kubectl replace -f - -n production
          gcloud secrets versions access latest --secret="prod-key-notifications-service-account" > google_application_credentials.json
          kubectl create configmap --dry-run=client -o yaml --from-file=google_application_credentials.json prod-notification-api-config-files | kubectl replace -f - -n production

      - name: Deploy to K8S
        run: |
          kubectl apply -f k8s/notification-service/prod-notification-api.yaml
          kubectl set image deployment/airqo-notification-api notification-api=${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-notification-api:${{ needs.image-tag.outputs.build_id }} -n production
          kubectl annotate deployment/airqo-notification-api kubernetes.io/change-cause="Image updated to ${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-notification-api:${{ needs.image-tag.outputs.build_id }} on ${{ needs.image-tag.outputs.datetime }}" -n production

  ### predict api and jobs ###
  predict-service:
    name: build-push-deploy-predict-service
    needs: [check, image-tag]
    if: needs.check.outputs.run_predict == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to GCR
        uses: docker/login-action@v1
        with:
          registry: ${{ secrets.REGISTRY_URL }}
          username: _json_key
          password: ${{ secrets.GCR_CONFIG }}

      - name: Login to K8S
        uses: azure/k8s-set-context@v1
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.K8S_CONFIG_PROD }}

      - name: Build and push API Docker Image
        uses: docker/build-push-action@v2
        with:
          push: true
          context: src/predict/api
          target: production
          tags: ${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-prediction-api:${{ needs.image-tag.outputs.build_id }},${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-prediction-api:latest

      - name: Build and push predict Job Docker Image
        uses: docker/build-push-action@v2
        with:
          push: true
          context: src/predict/jobs/predict
          target: production
          tags: ${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-predict-job:${{ needs.image-tag.outputs.build_id }},${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-predict-job:latest

      - name: Build and push train Job Docker Image
        uses: docker/build-push-action@v2
        with:
          push: true
          context: src/predict/jobs/train
          target: production
          tags: ${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-train-job:${{ needs.image-tag.outputs.build_id }},${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-train-job:latest

      - name: Login to GCP
        uses: google-github-actions/auth@v0
        with:
          credentials_json: ${{ secrets.GCP_SA_CREDENTIALS }}

      - name: Setup Cloud SDK
        uses: google-github-actions/setup-gcloud@v0

      - name: Update the corresponding k8s configmap(s)
        run: |
          cd src/predict/    
          echo "=============== Creating the required secret files ==============="     
          gcloud secrets versions access latest --secret="prod-env-predict-api" > api.env
          gcloud secrets versions access latest --secret="prod-env-predict-job" > predict_job.env
          gcloud secrets versions access latest --secret="prod-env-predict-train-job" > train_job.env
          gcloud secrets versions access latest --secret="prod-key-predict-service-account" > google_application_credentials.json 
          echo "=============== Updating the respective .env files ==============="
          kubectl create configmap --dry-run=client -o yaml --from-env-file=api.env env-predict-production | kubectl replace -f - -n production
          kubectl create configmap --dry-run=client -o yaml --from-env-file=predict_job.env env-predict-job-production | kubectl replace -f - -n production
          kubectl create configmap --dry-run=client -o yaml --from-env-file=train_job.env env-train-job-production | kubectl replace -f - -n production
          echo "=============== Updating the respective credentials files ==============="
          kubectl create configmap --dry-run=client -o yaml --from-file=google_application_credentials.json env-predict-production-files | kubectl replace -f - -n production
          kubectl create configmap --dry-run=client -o yaml --from-file=google_application_credentials.json predict-job-config-files | kubectl replace -f - -n production
          kubectl create configmap --dry-run=client -o yaml --from-file=google_application_credentials.json train-job-config-files | kubectl replace -f - -n production

      - name: Deploy to K8S
        run: |
          kubectl apply -f k8s/predict/prod-prediction-api.yaml -n production
          kubectl rollout restart deployment airqo-prediction-api -n production
          kubectl apply -f k8s/predict/prod-airqo-predict-job.yaml -n production
          kubectl apply -f k8s/predict/prod-airqo-train-job.yaml -n production

  ### network uptime ###
  network-uptime:
    name: build-push-network-uptime
    needs: [check, image-tag]
    if: needs.check.outputs.run_network_uptime == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Login to GCR
        uses: docker/login-action@v1
        with:
          registry: ${{ secrets.REGISTRY_URL }}
          username: _json_key
          password: ${{ secrets.GCR_CONFIG }}

      - name: Login to K8S
        uses: azure/k8s-set-context@v1
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.K8S_CONFIG_PROD }}

      - name: Build and Push Docker Image
        run: |
          cd src/network-uptime/
          docker build --tag ${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-network-uptime-api:${{ needs.image-tag.outputs.build_id }} .
          docker tag ${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-network-uptime-api:${{ needs.image-tag.outputs.build_id }} ${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-network-uptime-api:latest
          docker push ${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-network-uptime-api:${{ needs.image-tag.outputs.build_id }}
          docker push ${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-network-uptime-api:latest

      - name: Login to GCP
        uses: google-github-actions/auth@v0
        with:
          credentials_json: ${{ secrets.GCP_SA_CREDENTIALS }}

      - name: Setup Cloud SDK
        uses: google-github-actions/setup-gcloud@v0

      - name: Update the corresponding k8s configmap(s)
        run: |
          cd src/network-uptime/
          gcloud secrets versions access latest --secret="prod-env-network-uptime" > .env
          kubectl create configmap --dry-run=client -o yaml --from-env-file=.env env-network-uptime-production | kubectl replace -f - -n production

      - name: Deploy to K8S
        run: |
          kubectl apply -f k8s/network-uptime/prod-airqo-network-uptime-api.yaml -n production
          kubectl set image deployment/airqo-network-uptime-api prod-network-uptime=${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-network-uptime-api:${{ needs.image-tag.outputs.build_id }} -n production
          kubectl annotate deployment/airqo-network-uptime-api kubernetes.io/change-cause="Image updated to ${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-network-uptime-api:${{ needs.image-tag.outputs.build_id }} on ${{ needs.image-tag.outputs.datetime }}" -n production

  #### Channel data ######
  channel-data:
    name: build-push-deploy-channel-data-job
    needs: [check, image-tag]
    if: needs.check.outputs.run_channel_data == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Login to GCR
        uses: docker/login-action@v1
        with:
          registry: ${{ secrets.REGISTRY_URL }}
          username: _json_key
          password: ${{ secrets.GCR_CONFIG }}

      - name: Login to K8S
        uses: azure/k8s-set-context@v1
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.K8S_CONFIG_PROD }}

      - name: Build and Push Docker Image
        run: |
          cd src/channel-data/
          docker build --target=production --tag ${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/prod-update-channel-data-job:latest .
          docker push ${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/prod-update-channel-data-job:latest

      - name: Login to GCP
        uses: google-github-actions/auth@v0
        with:
          credentials_json: ${{ secrets.GCP_SA_CREDENTIALS }}

      - name: Setup Cloud SDK
        uses: google-github-actions/setup-gcloud@v0

      - name: Update the corresponding k8s configmap(s)
        run: |
          cd src/channel-data/
          gcloud secrets versions access latest --secret="prod-env-channel-data" > .env
          kubectl create configmap --dry-run=client -o yaml --from-env-file=.env env-update-channel-data-production | kubectl replace -f - -n production
          gcloud secrets versions access latest --secret="prod-key-channel-data-service-account" > google_application_credentials.json
          kubectl create configmap --dry-run=client -o yaml --from-file=google_application_credentials.json env-update-channel-data-production-files | kubectl replace -f - -n production

      - name: Deploy to K8S
        run: |
          kubectl apply -f k8s/channel-data/prod-airqo-update-channel-data-job.yaml -n production

  ### apply nginx ingress ###
  nginx-ingress:
    name: apply-nginx-ingress
    needs: [check]
    if: needs.check.outputs.run_nginx == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Login to K8S
        uses: azure/k8s-set-context@v1
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.K8S_CONFIG_PROD }}

      - name: Apply ingress changes
        run: |
          kubectl apply -f k8s/nginx/production/ingress.yaml
          kubectl apply -f k8s/nginx/production/virtual-server.yaml
          kubectl apply -f k8s/nginx/production/global-config.yaml
